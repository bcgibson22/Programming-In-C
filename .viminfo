# This viminfo file was generated by Vim 7.4.
# You may edit it if you're careful!

# Value of 'encoding' when this file was written
*encoding=latin1


# hlsearch on (H) or off (h):
~H
# Last Search Pattern:
~MSle0~/succ

# Last Substitute Search Pattern:
~MSle0&?

# Last Substitute String:
$

# Command Line History (newest to oldest):
:wq
:q
:q!
:WQ
:w1
:wwq
:qall
:aq
:s
:wq 
:wwq 
:qw
:w
:wq!
:23 yy
:2
:Q!
:Q
:ew
:::
:wq:wq:
:!
::q
:NERDTree
:wqa
:$
:qa
:help syntastic-checkers-c
:print syntastic-checkers-c
:syntastic-checkers-c
:help syntastic-recommended
:help syntaxstic-checkers
:.ll
:wa
:tabnew menu.c
:tabnew options.c
:tabnew optioins.c
:qa!
:!qa
:vsp reverseinput
:ClangFormatAutoDisable
:commentary
:set relativenumber
:wsa
:1
:tabnew options.h
:220
:tabnew helpers.c
:409
:tabnew menu.h
:o options.h
:sp
:207
:171
:tabnew main.h
:make 
:118
:tabnew main.c
:tabnew helpers.h
:sp helpers.c
:vsp helpers.c
:vsp menu.c
:51
:337
:wqa'
:sp options.h
:vsp main.h
:sp menu.h
:ConqueTerm bash
:make
:tabnew ~/.vim/colors/taffy.vim
:wqz
:ws
:'<,'>%s//
:'<,'>%s/\/\//
:!pwd
:>qa
:qa'
:ConqueTermVSplit fish
:a
:'<,'>qa
:tabnew ThreadPool.cpp
:browse tabnew
:tabnew Search.h
:tabnew Experiment.cpp
:162
:148
:130
:112
:113
:108
:%s/?//g
:%s/\?//g
:sp Data.h
:tabnew list.h
:199
:105
:254
:342
:236

# Search String History (newest to oldest):
?/succ
?/p
?/count
?/next
?/prev
?/load
?/read
?/char
?/process
?/string
?/max
?/const
?/NUM
?/NUM_
?/act
?/input
?/menu
?/inpu
?/typedef
?/typedef of
?/editor
?/void
?/menu_it
?/process_
?/struct
?/menu_c
?/action
?/menu_choice
?/enum
?/ENUM
?/en
?/bool
?/BOOl
?/BOOLEAN
?/menu_
?/name
?/out
?/save
?/NUMARGS
?/fname
?/make
?/loaded
?/array
?/linkedlist_s
?/func
?/funct
?/line_m
?/reader
?/current
?/insert_
?/offs
?/init
?/insert
?/free
? }
?/open
?/my
?/add
? \<include\>
?/EXTRA
? {
? \<data\>
?/text
? \<first\>
?/myperson
?/list_add
?/data
?/malloc
?/line
?/size
?/head
?/cmp
?/person_cmp
?/person
?/perror
?/repl
?/strc
?/accn
?/str
? \<malloc\>
?/23 yy
?/:wq
?/| 3 free
?/display
?/start
? );
? \<str\>
? \<output\>
?/_s
?/choice
?/main
?/was
?/print
?/matrix_sum
?/summat
?/othermat
?/matrix
?/invalid denom
?/guess
?/process_menu
? \<newreg\>
? \<request_count\>
?/return
?/skip_array
?/can
? \<tok_part\>
?/register
? \<denom_result\>
?/PUT
? \<process_change_requests\>
? \<quit_succ\>
?/ires
?/guess_a_number
? \<current_guess\>
? \<lreg\>
? \<skip_array\>
? \<l_reg_skip_array\>
? \<value_count\>
?/help
?/assert(FALSE)
? \<single_thread\>
? \<read_lock\>
?/lock
? \<writeLock\>
?/sleep
? \<publicLock\>
?/pthread
?/omment
?/ommend
? \<strdup\>
?/CHOIC
?/normal
?/MAX
? \<can_give_all_changes\>
?/runner
?/manyAllocations
? \<thread_run\>
?/thread_run
?/readUlock
? \<readUnlock\>
? \<freelistReader\>
?/NUM_ALLOCS
? \<justAlloc\>
?/create
? \<addReader\>
? \<findBestFit\>
? \<runner\>
?/unlock
? \<makeAllocations\>
? \<master\>
? \<readLock\>
?/read_
? \<THREADNUM\>
? \<alloc_firstFit\>
? \<waiting_readers\>
?/alloc_worker
? \<alloc_worker\>
? \<writing_mutex\>
? \<thread_lock\>
?/genData
? \<bestChunk\>
? \<worstFit\>
? \<alloc_thread\>
? \<freeReadLock\>
?/read'
? \<readLockStart\>
?/mutex

# Expression History (newest to oldest):

# Input Line History (newest to oldest):

# Input Line History (newest to oldest):

# Registers:
""0	CHAR	0
	#include <stdio.h>
	#include <math.h>
	#include <stdlib.h>
	#ifndef SHARED_H
	#define SHARED_H
	typedef enum boolean {
	    FALSE,
	    TRUE
	} BOOLEAN;
	#endif
"1	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <ctype.h>
	#include "q3-shared.h"
	
	int main(void) { return EXIT_SUCCESS; }
	/*MAIN START*/
	struct word_entry {
	    char* word; /* each word is malloced and then copied using strcpy)*/
	    int count;  /* how many times this word has been seen */
	};
	struct word_node {
	    struct word_entry* data;
	    struct word_node* next;
	};
	struct word_list {
	    struct word_node* head;
	    size_t num_nodes; /* count of the number of list nodes */
	    size_t num_words; /* count of the actual number of words processed */
	};
	/*END MAIN*/
	
	/*A*/
	void word_list_init(struct word_list* list) {
	    /*initialise the list by zeroing it out*/
	    memset(list, 0, sizeof(struct word_list));
	}
	/*END A*/
	
	/*B*/
	BOOLEAN word_list_add(struct word_list* list, const char* word) {
	    /*memory allocation and variable declaration is worth marks*/
	    struct word_node* new = (struct word_node*)malloc(sizeof(struct word_node));
	    struct word_entry* entry =
	        (struct word_entry*)malloc(sizeof(struct word_entry));
	    char* newword = malloc(strlen(word) + 1);
	    struct word_node* current, *prev = NULL;
	
	    if (!new || !entry || !newword) {
	        return FALSE;
	    }
	    /*initialise the node*/
	    entry->word = newword;
	    entry->count = 1;
	    new->data = entry;
	    new->next = NULL;
	    /*test to see if node is empty; if it is fill it*/
	    if (list->num_nodes == 0) {
	        list->head = new;
"2	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <ctype.h>
	#include "q3-shared.h"
	
	int main(void) { return EXIT_SUCCESS; }
	/*MAIN START*/
	struct word_entry {
	    char* word; /* each word is malloced and then copied using strcpy)*/
	    int count;  /* how many times this word has been seen */
	};
	struct word_node {
	    struct word_entry* data;
	    struct word_node* next;
	};
	struct word_list {
	    struct word_node* head;
	    size_t num_nodes; /* count of the number of list nodes */
	    size_t num_words; /* count of the actual number of words processed */
	};
	/*END MAIN*/
	
	/*A*/
	void word_list_init(struct word_list* list) {
	    /*initialise the list by zeroing it out*/
	    memset(list, 0, sizeof(struct word_list));
	}
	/*END A*/
	
	/*B*/
	BOOLEAN word_list_add(struct word_list* list, const char* word) {
	    /*memory allocation and variable declaration is worth marks*/
	    struct word_node* new = (struct word_node*)malloc(sizeof(struct word_node));
	    struct word_entry* entry =
	        (struct word_entry*)malloc(sizeof(struct word_entry));
	    char* newword = malloc(strlen(word) + 1);
	    struct word_node* current, *prev = NULL;
	
	    if (!new || !entry || !newword) {
	        return FALSE;
	    }
	    /*initialise the node*/
	    entry->word = newword;
	    entry->count = 1;
	    new->data = entry;
	    new->next = NULL;
	    /*test to see if node is empty; if it is fill it*/
	    if (list->num_nodes == 0) {
	        list->head = new;
"3	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <ctype.h>
	#include "q3-shared.h"
	
	int main(void) { return EXIT_SUCCESS; }
	/*MAIN START*/
	struct word_entry {
	    char* word; /* each word is malloced and then copied using strcpy)*/
	    int count;  /* how many times this word has been seen */
	};
	struct word_node {
	    struct word_entry* data;
	    struct word_node* next;
	};
	struct word_list {
	    struct word_node* head;
	    size_t num_nodes; /* count of the number of list nodes */
	    size_t num_words; /* count of the actual number of words processed */
	};
	/*END MAIN*/
	
	/*A*/
	void word_list_init(struct word_list* list) {
	    /*initialise the list by zeroing it out*/
	    memset(list, 0, sizeof(struct word_list));
	}
	/*END A*/
	
	/*B*/
	BOOLEAN word_list_add(struct word_list* list, const char* word) {
	    /*memory allocation and variable declaration is worth marks*/
	    struct word_node* new = (struct word_node*)malloc(sizeof(struct word_node));
	    struct word_entry* entry =
	        (struct word_entry*)malloc(sizeof(struct word_entry));
	    char* newword = malloc(strlen(word) + 1);
	    struct word_node* current, *prev = NULL;
	
	    if (!new || !entry || !newword) {
	        return FALSE;
	    }
	    /*initialise the node*/
	    entry->word = newword;
	    entry->count = 1;
	    new->data = entry;
	    new->next = NULL;
	    /*test to see if node is empty; if it is fill it*/
	    if (list->num_nodes == 0) {
	        list->head = new;
"4	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <ctype.h>
	#include "q3-shared.h"
	
	int main(void) { return EXIT_SUCCESS; }
	/*MAIN START*/
	struct word_entry {
	    char* word; /* each word is malloced and then copied using strcpy)*/
	    int count;  /* how many times this word has been seen */
	};
	struct word_node {
	    struct word_entry* data;
	    struct word_node* next;
	};
	struct word_list {
	    struct word_node* head;
	    size_t num_nodes; /* count of the number of list nodes */
	    size_t num_words; /* count of the actual number of words processed */
	};
	/*END MAIN*/
	
	/*A*/
	void word_list_init(struct word_list* list) {
	    /*initialise the list by zeroing it out*/
	    memset(list, 0, sizeof(struct word_list));
	}
	/*END A*/
	
	/*B*/
	BOOLEAN word_list_add(struct word_list* list, const char* word) {
	    /*memory allocation and variable declaration is worth marks*/
	    struct word_node* new = (struct word_node*)malloc(sizeof(struct word_node));
	    struct word_entry* entry =
	        (struct word_entry*)malloc(sizeof(struct word_entry));
	    char* newword = malloc(strlen(word) + 1);
	    struct word_node* current, *prev = NULL;
	
	    if (!new || !entry || !newword) {
	        return FALSE;
	    }
	    /*initialise the node*/
	    entry->word = newword;
	    entry->count = 1;
	    new->data = entry;
	    new->next = NULL;
	    /*test to see if node is empty; if it is fill it*/
	    if(list->num_nodes == 0){
	        list->head = new;
"5	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <ctype.h>
	#include "q3-shared.h"
	
	int main(void) { return EXIT_SUCCESS; }
	/*MAIN START*/
	struct word_entry {
	    char* word; /* each word is malloced and then copied using strcpy)*/
	    int count;  /* how many times this word has been seen */
	};
	struct word_node {
	    struct word_entry* data;
	    struct word_node* next;
	};
	struct word_list {
	    struct word_node* head;
	    size_t num_nodes; /* count of the number of list nodes */
	    size_t num_words; /* count of the actual number of words processed */
	};
	/*END MAIN*/
	
	/*A*/
	void word_list_init(struct word_list* list) {
	    /*initialise the list by zeroing it out*/
	    memset(list, 0, sizeof(struct word_list));
	}
	/*END A*/
	
	/*B*/
	BOOLEAN word_list_add(struct word_list* list, const char* word) {
	    /*memory allocation and variable declaration is worth marks*/
	    struct word_node* new = (struct word_node*)malloc(sizeof(struct word_node));
	    struct word_entry* entry =
	        (struct word_entry*)malloc(sizeof(struct word_entry));
	    char* newword = malloc(strlen(word) + 1);
	    struct word_node* current, *prev = NULL;
	
	    if (!new || !entry || !newword) {
	        return FALSE;
	    }
	    /*initialise the node*/
	    entry->word = newword;
	    entry->count = 1;
	    new->data = entry;
	    new->next = NULL;
	}
	
	/*END B*/
"6	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <ctype.h>
	#include "q3-shared.h"
	
	int main(void) { return EXIT_SUCCESS; }
	/*MAIN START*/
	struct word_entry {
	    char* word; /* each word is malloced and then copied using strcpy)*/
	    int count;  /* how many times this word has been seen */
	};
	struct word_node {
	    struct word_entry* data;
	    struct word_node* next;
	};
	struct word_list {
	    struct word_node* head;
	    size_t num_nodes; /* count of the number of list nodes */
	    size_t num_words; /* count of the actual number of words processed */
	};
	/*END MAIN*/
	
	/*A*/
	void word_list_init(struct word_list* list) {
	    /*initialise the list by zeroing it out*/
	    memset(list, 0, sizeof(struct word_list));
	}
	/*END A*/
	
	/*B*/
	BOOLEAN word_list_add(struct word_list* list, const char* word) {
	    /*memory allocation and variable declaration is worth marks*/
	    struct word_node* new = (struct word_node*)malloc(sizeof(struct word_node));
	    struct word_entry* entry =
	        (struct word_entry*)malloc(sizeof(struct word_entry));
	    char* newword = malloc(strlen(word) + 1);
	    struct word_node* current, *prev = NULL;
	
	    if (!new || or !entry || !newword) {
	        return FALSE;
	    }
	    /*initialise the node*/
	    entry->word = newword;
	    entry->count = 1;
	    new->data = entry;
	    new->next = NULL;
	}
	
	/*END B*/
"7	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <ctype.h>
	#include "q3-shared.h"
	
	int main(void) { return EXIT_SUCCESS; }
	/*MAIN START*/
	struct word_entry {
	    char* word; /* each word is malloced and then copied using strcpy)*/
	    int count;  /* how many times this word has been seen */
	};
	struct word_node {
	    struct word_entry* data;
	    struct word_node* next;
	};
	struct word_list {
	    struct word_node* head;
	    size_t num_nodes; /* count of the number of list nodes */
	    size_t num_words; /* count of the actual number of words processed */
	};
	/*END MAIN*/
	
	/*A*/
	void word_list_init(struct word_list* list) {
	    /*initialise the list by zeroing it out*/
	    memset(list, 0, sizeof(struct word_list));
	}
	/*END A*/
	
	/*B*/
	BOOLEAN word_list_add(struct word_list* list, const char* word) {
	    /*memory allocation and variable declaration is worth marks*/
	    struct word_node* new = (struct word_node*)malloc(sizeof(struct word_node));
	    struct word_entry* entry =
	        (struct word_entry*)malloc(sizeof(struct word_entry));
	    char* newword = malloc(strlen(word) + 1);
	    struct word_node* current, prev = NULL;
	
	    if (!new || or !entry || !newword) {
	        return FALSE;
	    }
	    /*initialise the node*/
	    entry->word = newword;
	    entry->count = 1;
	    new->data = entry;
	    new->next = NULL;
	}
	
	/*END B*/
"8	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <ctype.h>
	#include "q3-shared.h"
	
	int main(void) { return EXIT_SUCCESS; }
	/*MAIN START*/
	struct word_entry {
	    char* word; /* each word is malloced and then copied using strcpy)*/
	    int count;  /* how many times this word has been seen */
	};
	struct word_node {
	    struct word_entry* data;
	    struct word_node* next;
	};
	struct word_list {
	    struct word_node* head;
	    size_t num_nodes; /* count of the number of list nodes */
	    size_t num_words; /* count of the actual number of words processed */
	};
	/*END MAIN*/
	
	/*A*/
	void word_list_init(struct word_list* list) {
	    /*initialise the list by zeroing it out*/
	    memset(list, 0, sizeof(struct word_list));
	}
	/*END A*/
	
	/*B*/
	BOOLEAN word_list_add(struct word_list* list, const char* word) {
	    /*memory allocation and variable declaration is worth marks*/
	    struct word_node* new = (struct word_node*)malloc(sizeof(struct word_node));
	    struct word_entry* entry = (struct word_entry *)
	        malloc(sizeof(struct word_entry));
	    char * newword = mallooc(strlen(word) +1);
	    struct word_node * current, prev = NULL;
	
	    if(!new || or !entry || !newword){return FALSE;
	    }
	    /*initialise the node*/
	    entry->word = newword;
	    entry->count = 1;
	    new->data = entry;
	    new->next = NULL;
	}
	
	/*END B*/
	
"9	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <ctype.h>
	#include "q3-shared.h"
	
	int main(void) { return EXIT_SUCCESS; }
	/*MAIN START*/
	struct word_entry {
	    char* word; /* each word is malloced and then copied using strcpy)*/
	    int count;  /* how many times this word has been seen */
	};
	struct word_node {
	    struct word_entry* data;
	    struct word_node* next;
	};
	struct word_list {
	    struct word_node* head;
	    size_t num_nodes; /* count of the number of list nodes */
	    size_t num_words; /* count of the actual number of words processed */
	};
	/*END MAIN*/
	
	/*A*/
	void word_list_init(struct word_list* list) {
	    /*initialise the list by zeroing it out*/
	    memset(list, 0, sizeof(struct word_list));
	}
	/*END A*/
	
	/*B*/
	BOOLEAN word_list_add(struct word_list* list, const char* word) {
	    /*memory allocation and variable declaration is worth marks*/
	    struct word_node* new = (struct word_node*)malloc(sizeof(struct word_node));
	    struct word_entry* entry = (struct word_entry *)
	        malloc(sizeof(struct word_entry);
	    char * newword = mallooc(strlen(word) +1);
	    struct word_node * current, prev = NULL;
	
	    if(!new || or !entry || !newword){return FALSE;
	    }
	    /*initialise the node*/
	    entry->word = newword;
	    entry->count = 1;
	    new->data = entry;
	    new->next = NULL;
	}
	
	/*END B*/
	
"a	CHAR	0
	':
"-	CHAR	0
	(

# global variables:

# File marks:
'0  103  4  ~/doom/2017/q4.c
'1  107  20  ~/doom/2017/q4.c
'2  107  0  ~/doom/2017/q4.c
'3  107  0  ~/doom/2017/q4.c
'4  107  14  ~/doom/2017/q4.c
'5  107  31  ~/doom/2017/q4.c
'6  107  24  ~/doom/2017/q4.c
'7  107  40  ~/doom/2017/q4.c
'8  107  29  ~/doom/2017/q4.c
'9  107  21  ~/doom/2017/q4.c

# Jumplist (newest first):
-'  103  4  ~/doom/2017/q4.c
-'  107  8  ~/doom/2017/q4.c
-'  15  24  ~/doom/2017/q3.c
-'  38  0  ~/doom/2017/q3.c
-'  39  0  ~/doom/2017/q3.c
-'  1  0  ~/q3.c
-'  23  16  ~/doom/2017/q3.h
-'  4  0  ~/doom/2017/q3-shared.h
-'  27  0  ~/doom/2017/q3.h
-'  1  12  ~/assignment-one/options.h
-'  95  0  ~/assignment-one/options.h
-'  1  0  ~/assignment-one/action.h
-'  1  0  ~/assignment-one/shared.h
-'  196  5  ~/assignment-two/startup/action.h
-'  1  0  ~/assignment-two/startup/action.h
-'  63  0  ~/assignment-two/startup/fileio.c
-'  1  0  ~/assignment-two/startup/fileio.c
-'  33  0  ~/assignment-two/startup/fileio.h
-'  1  0  ~/assignment-two/startup/fileio.h
-'  45  39  ~/doom/2017/q2.c
-'  50  4  ~/doom/2017/q2.c
-'  1  0  ~/doom/2017/q2
-'  1  4  ~/doom/2017/q2.h
-'  10  16  ~/doom/2017/q2.h
-'  30  17  ~/doom/2017/q1d.c
-'  29  12  ~/doom/2017/q1d.c
-'  45  0  ~/doom/2017/q1d.c
-'  36  0  ~/doom/2017/q1c.c
-'  53  8  ~/doom/2017/q1c.c
-'  1  0  ~/doom/2017/q1-c.c
-'  54  0  ~/doom/2017/q1c.c
-'  52  0  ~/assignment-one/options.c
-'  1  0  ~/assignment-one/options.c
-'  7  0  ~/first.c
-'  5  4  ~/first.c
-'  8  0  ~/first.c
-'  1  0  ~/fileio.c
-'  11  4  ~/doom/2017/q1.c
-'  1  0  ~/doom/2017/a1.c
-'  14  4  ~/doom/2017/q1.c
-'  1  0  ~/assignment-two/part2/startup/fileio.h
-'  1  0  ~/assignment-two/part2/startup/fileio.c
-'  1  0  ~/assignment-two/part2/startup/filio.c
-'  1  0  ~/assignment-two/part2/startup/shared.h
-'  1  0  ~/assignment-two/part2/startup/main.h
-'  1  0  ~/assignment-two/part2/startup/linkedlist.c
-'  1  0  ~/assignment-two/part2/startup/linkedlist.h
-'  31  34  ~/assignment-two/startup/ui.c
-'  32  4  ~/assignment-two/startup/ui.c
-'  26  0  ~/assignment-two/startup/ui.h
-'  14  0  ~/assignment-two/startup/ui.h
-'  87  25  ~/assignment-two/startup/action.c
-'  166  0  ~/assignment-two/startup/action.c
-'  62  2  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_process.c
-'  203  47  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_process.c
-'  11  8  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_process.c
-'  21  5  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_process.h
-'  1  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_process.h
-'  21  16  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_process.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_process.c
-'  171  4  ~/assignment-two/startup/action.c
-'  1  0  ~/assignment-two/startup/actiln.c
-'  182  38  ~/assignment-two/startup/action.h
-'  198  0  ~/assignment-two/startup/action.h
-'  8  0  ~/assignment-two/startup/main.c
-'  1  0  ~/assignment-two/startup/main.c
-'  33  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.h
-'  63  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.c
-'  71  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.c
-'  5  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.c
-'  1  0  ~/action.h
-'  1  0  action/h
-'  1  0  ~/assignment-two/startup/actio.h
-'  41  17  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.c
-'  56  16  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.c
-'  14  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.h
-'  13  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.h
-'  21  8  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/filefuncs.c
-'  37  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.h
-'  20  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.h
-'  27  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.h
-'  34  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.h
-'  1  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.u
-'  26  8  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.c
-'  6  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.c
-'  40  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.c
-'  32  8  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.c
-'  102  8  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.c
-'  51  8  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.h
-'  97  1  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_funcs.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/filefuncs.h
-'  1  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/Makefile
-'  1  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/makefile
-'  283  0  /home/el9/E70949/shared/prog_in_c/examples/FuncPtr/file_process.c

# History of marks within files (newest to oldest):

> ~/doom/2017/q4.c
	"	103	4
	+	107	0
	+	107	5
	+	107	2
	+	107	11
	+	107	12
	+	107	9
	+	107	5
	+	107	9
	+	107	5
	+	107	6
	+	107	14
	+	107	44
	+	107	64
	+	107	46
	+	107	0
	+	107	21
	+	107	41
	+	107	41
	+	107	43
	+	107	0
	+	107	17
	+	107	0
	+	107	0
	+	107	4
	+	107	61
	+	107	21
	+	107	41
	+	107	46
	+	107	27
	+	107	20
	+	107	24
	+	107	21
	+	107	30
	+	107	40
	+	107	25
	+	107	31
	+	107	15
	+	107	54
	+	107	24
	+	107	0
	+	107	66
	+	107	67
	+	107	46
	+	107	18
	+	107	0
	+	107	0
	+	107	20
	+	107	44
	+	107	0
	+	107	0
	+	107	40
	+	107	41
	+	107	15
	+	107	0
	+	107	20
	+	107	0
	+	107	22
	+	107	22
	+	107	26
	+	107	0
	+	107	29
	+	107	31
	+	107	48
	+	107	27

> ~/doom/2017/q3.c
	"	15	24
	.	15	23
	+	39	19
	+	39	15
	+	39	0
	+	39	0
	+	39	59
	+	39	0
	+	39	70
	+	39	47
	+	39	35
	+	39	49
	+	39	0
	+	39	31
	+	39	32
	+	39	74
	+	39	33
	+	39	33
	+	39	36
	+	39	39
	+	39	5
	+	39	44
	+	39	0
	+	39	36
	+	39	56
	+	39	40
	+	39	27
	+	39	25
	+	39	22
	+	39	35
	+	39	5
	+	39	51
	+	39	34
	+	39	16
	+	39	18
	+	39	19
	+	39	16
	+	39	48
	+	39	50
	+	39	0
	+	39	50
	+	39	63
	+	39	34
	+	39	30
	+	39	0
	+	17	20
	+	15	23

> ~/doom/2017/q3-shared.h
	"	9	0
	+	11	0
	+	11	0
	+	11	0
	+	11	0
	+	11	0
	+	11	0
	+	11	0
	+	11	0
	+	11	0
	+	11	0
	+	11	0
	+	11	0
	+	11	0
	+	11	0
	+	11	0
	+	11	0
	+	11	5
	+	11	16
	+	11	0
	+	11	15
	+	11	15
	+	11	8
	+	11	9

> ~/doom/2017/q3.h
	"	23	41
	.	24	0
	+	24	18
	+	24	2
	+	24	14
	+	24	21
	+	24	7
	+	24	20
	+	24	0
	+	24	92
	+	24	51
	+	24	6
	+	24	1
	+	24	50
	+	24	21
	+	24	16
	+	24	53
	+	24	5
	+	24	1
	+	24	43
	+	24	22
	+	24	0
	+	24	0
	+	24	18
	+	24	21
	+	24	0
	+	24	1
	+	24	1
	+	24	0
	+	24	0
	+	24	1
	+	24	1
	+	24	0
	+	24	0
	+	24	0
	+	24	78
	+	24	0
	+	24	15
	+	24	0
	+	24	81
	+	24	22
	+	24	0

> ~/q3.c
	"	1	0

> ~/assignment-one/shared.h
	"	1	0

> ~/doom/2017/q3-shared.c
	"	1	0

> ~/assignment-one/options.h
	"	1	12

> ~/assignment-one/action.h
	"	1	0

> ~/assignment-one/main.h
	"	1	0

> ~/doom/2017/q2.h
	"	1	0
	+	11	209
	+	11	3
	+	11	14
	+	11	0
	+	11	50
	+	11	50
	+	11	4
	+	11	4
	+	11	4
	+	11	4
	+	11	3
	+	11	56
	+	11	55
	+	11	4
	+	11	22
	+	11	22
	+	11	0

> ~/doom/2017/q2-shared.h
	"	10	5
	+	11	5

> ~/assignment-two/startup/action.h
	"	196	5

> ~/assignment-two/startup/fileio.c
	"	63	0

> ~/doom/2017/q2.c
	"	27	16
	+	63	0
	+	63	0
	+	63	0
	+	63	15
	+	63	0
	+	63	8
	+	63	15
	+	63	18
	+	63	15
	+	63	36
	+	63	36
	+	63	8
	+	63	15
	+	63	15
	+	63	16
	+	63	17
	+	63	150
	+	63	22
	+	63	8
	+	63	15
	+	63	0
	+	63	27
	+	63	15
	+	63	1
	+	63	2
	+	63	0
	+	63	1
	+	63	4
	+	63	27
	+	63	31
	+	63	12
	+	63	13
	+	63	21
	+	63	17
	+	63	4
	+	63	13
	+	63	30
	+	63	10
	+	63	11
	+	63	21
	+	63	54
	+	63	32
	+	63	43
	+	63	23
	+	63	46
	+	63	4
	+	63	17
	+	63	43
	+	63	44
	+	63	41
	+	63	0
	+	63	0
	+	63	19
	+	63	41
	+	63	26
	+	63	18
	+	63	17
	+	63	1
	+	63	0
	+	63	48
	+	63	17
	+	63	9
	+	63	4
	+	63	2
	+	63	4
	+	63	4
	+	63	12
	+	63	0
	+	63	172
	+	63	0
	+	63	106
	+	63	41
	+	63	55
	+	63	14
	+	63	13
	+	63	56

> ~/assignment-two/startup/fileio.h
	"	33	0

> ~/doom/2017/q2
	"	1	0

> ~/doom/2017/q1d.c
	"	30	17
	+	45	1
	+	45	41
	+	45	42
	+	45	48
	+	45	38
	+	45	43
	+	45	40
	+	45	41
	+	45	37
	+	45	42
	+	45	47
	+	45	25
	+	45	19
	+	45	31
	+	45	25

> ~/doom/2017/q1c.c
	"	36	0
	+	54	1
	+	53	21
	+	53	21
	+	53	40
	+	53	0
	+	53	13
	+	53	0
	+	53	0
	+	53	52
	+	53	20
	+	53	30
	+	53	5
	+	53	22
	+	53	22
	+	53	22
	+	53	9
	+	53	70
	+	53	75
	+	53	23
	+	53	0

> ~/doom/2017/q1-c.c
	"	1	0
