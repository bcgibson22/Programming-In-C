# This viminfo file was generated by Vim 7.4.
# You may edit it if you're careful!

# Value of 'encoding' when this file was written
*encoding=utf-8


# hlsearch on (H) or off (h):
~H
# Last Search Pattern:
~Msle0~/\<str_function\>

# Last Substitute Search Pattern:
~MSle0&?

# Last Substitute String:
$

# Command Line History (newest to oldest):
:q
:wq
:w
:q!
::w
:swq
:ew
:wqa
:$
:qa
:help syntastic-checkers-c
:print syntastic-checkers-c
:syntastic-checkers-c
:help syntastic-recommended
:help syntaxstic-checkers
:.ll
:wa
:tabnew menu.c
:tabnew options.c
:tabnew optioins.c
:qa!
:!qa
:vsp reverseinput
:ClangFormatAutoDisable
:commentary
:set relativenumber
:wsa
:1
:tabnew options.h
:220
:tabnew helpers.c
:409
:tabnew menu.h
:o options.h
:sp
:207
:171
:tabnew main.h
:NERDTree
:make 
:118
:tabnew main.c
:tabnew helpers.h
:sp helpers.c
:vsp helpers.c
:vsp menu.c
:51
:337
:wqa'
:sp options.h
:vsp main.h
:sp menu.h
:ConqueTerm bash
:make
:tabnew ~/.vim/colors/taffy.vim
:wqz
:ws
:'<,'>%s//
:'<,'>%s/\/\//
:!pwd
:>qa
:qa'
:ConqueTermVSplit fish
:s
:a
:'<,'>qa
:tabnew ThreadPool.cpp
:browse tabnew
:tabnew Search.h
:tabnew Experiment.cpp
:162
:148
:130
:112
:113
:108
:%s/?//g
:%s/\?//g
:sp Data.h
:tabnew list.h
:199
:105
:254
:342
:236

# Search String History (newest to oldest):
? \<themenu\>
? \<NUM_MENU_CHOICES\>
? \<str_function\>
? \<c\>
? \<token\>
? \<l\>
?/i
?/*                                                                                                                  i
?/invalid denom
?/guess
?/process_menu
?/init
? \<newreg\>
? \<request_count\>
?/return
?/skip_array
?/can
? \<tok_part\>
?/register
? \<denom_result\>
?/PUT
? \<process_change_requests\>
? \<quit_succ\>
?/ires
?/guess_a_number
?/process
? \<current_guess\>
? \<lreg\>
? \<skip_array\>
? \<l_reg_skip_array\>
? \<value_count\>
?/help
?/assert(FALSE)
? \<single_thread\>
?/main
? \<read_lock\>
?/read
?/lock
? \<writeLock\>
?/sleep
? \<publicLock\>
?/pthread
?/omment
?/ommend
? \<strdup\>
?/CHOIC
?/normal
?/MAX
? \<can_give_all_changes\>
?/runner
?/manyAllocations
? \<thread_run\>
?/thread_run
?/readUlock
? \<readUnlock\>
? \<freelistReader\>
?/NUM_ALLOCS
? \<justAlloc\>
?/create
? \<addReader\>
? \<findBestFit\>
? \<runner\>
?/unlock
? \<makeAllocations\>
? \<master\>
? \<readLock\>
?/read_
? \<THREADNUM\>
? \<alloc_firstFit\>
? \<waiting_readers\>
?/alloc_worker
? \<alloc_worker\>
? \<writing_mutex\>
? \<thread_lock\>
?/genData
? \<bestChunk\>
? \<worstFit\>
? \<alloc_thread\>
? \<freeReadLock\>
?/read'
? \<readLockStart\>
?/mutex

# Expression History (newest to oldest):

# Input Line History (newest to oldest):

# Input Line History (newest to oldest):

# Registers:
""0	CHAR	0
	 normal_output("This: %s\n", themenu->selection);
	
"1	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 1, study period 2, 2020.
	 *****************************************************************************/
	#include "io.h"
	#include "options.h"
	
	#include <ctype.h>
	#include <limits.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	
	/**
	 * this module is the place to implement all i/o functionality. You should not
	 * call printf/fprintf, etc, outside this module as that will make it simpler
	 * if we ever want to change the target for output for the program.
	 **/
	
	/*the number of choices in the program*/
	#define NUM_MENU_CHOICES 5
	
	/*the minimum number of choices in the program*/
	#define MIN_NUM_MENU_CHOICES 1
	
	/*custom constants*/
	#define SCREENWIDTH 80
	#define TWO 2
	
	/*functions used in the program*/
	/*static void clear_buffer();
	BOOLEAN success = FALSE;
	*/
	/**
	* function provided to clear the input buffer whenever you detect buffer
	* overflow. It just reads the leftover bytes and throws them away, resetting
	* the error state
	**/
	/*
	static void clear_buffer(void) {
	    int ch;
	    while (ch = getc(stdin), ch != '\n' && ch != EOF)
	        ;
	    clearerr(stdin);
	}*/
	
	/**
"2	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 1, study period 2, 2020.
	 *****************************************************************************/
	#include "io.h"
	#include "options.h"
	
	#include <ctype.h>
	#include <limits.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	
	/**
	 * this module is the place to implement all i/o functionality. You should not
	 * call printf/fprintf, etc, outside this module as that will make it simpler
	 * if we ever want to change the target for output for the program.
	 **/
	
	/*the number of choices in the program*/
	#define NUM_MENU_CHOICES 5
	
	/*the minimum number of choices in the program*/
	#define MIN_NUM_MENU_CHOICES 1
	
	/*custom constants*/
	#define SCREENWIDTH 80
	#define TWO 2
	
	/*functions used in the program*/
	/*static void clear_buffer();
	BOOLEAN success = FALSE;
	*/
	/**
	* function provided to clear the input buffer whenever you detect buffer
	* overflow. It just reads the leftover bytes and throws them away, resetting
	* the error state
	**/
	/*
	static void clear_buffer(void) {
	    int ch;
	    while (ch = getc(stdin), ch != '\n' && ch != EOF)
	        ;
	    clearerr(stdin);
	}*/
	
	/**
"3	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 1, study period 2, 2020.
	 *****************************************************************************/
	#include "io.h"
	#include "options.h"
	
	#include <ctype.h>
	#include <limits.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	
	/**
	 * this module is the place to implement all i/o functionality. You should not
	 * call printf/fprintf, etc, outside this module as that will make it simpler
	 * if we ever want to change the target for output for the program.
	 **/
	
	/*the number of choices in the program*/
	#define NUM_MENU_CHOICES 5
	
	/*the minimum number of choices in the program*/
	#define MIN_NUM_MENU_CHOICES 1
	
	/*custom constants*/
	#define SCREENWIDTH 80
	#define TWO 2
	
	/*functions used in the program*/
	/*static void clear_buffer();
	BOOLEAN success = FALSE;
	*/
	/**
	* function provided to clear the input buffer whenever you detect buffer
	* overflow. It just reads the leftover bytes and throws them away, resetting
	* the error state
	**/
	/*
	static void clear_buffer(void) {
	    int ch;
	    while (ch = getc(stdin), ch != '\n' && ch != EOF)
	        ;
	    clearerr(stdin);
	}*/
	
	/**
"4	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 1, study period 2, 2020.
	 *****************************************************************************/
	#include "io.h"
	#include "options.h"
	
	#include <ctype.h>
	#include <limits.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	
	/**
	 * this module is the place to implement all i/o functionality. You should not
	 * call printf/fprintf, etc, outside this module as that will make it simpler
	 * if we ever want to change the target for output for the program.
	 **/
	
	/*the number of choices in the program*/
	#define NUM_MENU_CHOICES 5
	
	/*the minimum number of choices in the program*/
	#define MIN_NUM_MENU_CHOICES 1
	
	/*custom constants*/
	#define SCREENWIDTH 80
	#define TWO 2
	
	/*functions used in the program*/
	/*static void clear_buffer();
	BOOLEAN success = FALSE;
	*/
	/**
	* function provided to clear the input buffer whenever you detect buffer
	* overflow. It just reads the leftover bytes and throws them away, resetting
	* the error state
	**/
	/*
	static void clear_buffer(void) {
	    int ch;
	    while (ch = getc(stdin), ch != '\n' && ch != EOF)
	        ;
	    clearerr(stdin);
	}*/
	
	/**
"5	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 1, study period 2, 2020.
	 *****************************************************************************/
	#include "io.h"
	#include "options.h"
	
	#include <ctype.h>
	#include <limits.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	
	/**
	 * this module is the place to implement all i/o functionality. You should not
	 * call printf/fprintf, etc, outside this module as that will make it simpler
	 * if we ever want to change the target for output for the program.
	 **/
	
	/*the number of choices in the program*/
	#define NUM_MENU_CHOICES 5
	
	/*the minimum number of choices in the program*/
	#define MIN_NUM_MENU_CHOICES 1
	
	/*custom constants*/
	#define SCREENWIDTH 80
	#define TWO 2
	
	/*functions used in the program*/
	/*static void clear_buffer();
	BOOLEAN success = FALSE;
	*/
	/**
	* function provided to clear the input buffer whenever you detect buffer
	* overflow. It just reads the leftover bytes and throws them away, resetting
	* the error state
	**/
	/*
	static void clear_buffer(void) {
	    int ch;
	    while (ch = getc(stdin), ch != '\n' && ch != EOF)
	        ;
	    clearerr(stdin);
	}*/
	
	/**
"6	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 1, study period 2, 2020.
	 *****************************************************************************/
	#include "io.h"
	#include "options.h"
	
	#include <ctype.h>
	#include <limits.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	
	/**
	 * this module is the place to implement all i/o functionality. You should not
	 * call printf/fprintf, etc, outside this module as that will make it simpler
	 * if we ever want to change the target for output for the program.
	 **/
	
	/*the number of choices in the program*/
	#define NUM_MENU_CHOICES 5
	
	/*the minimum number of choices in the program*/
	#define MIN_NUM_MENU_CHOICES 1
	
	/*custom constants*/
	#define SCREENWIDTH 80
	#define TWO 2
	
	/*functions used in the program*/
	/*static void clear_buffer();
	BOOLEAN success = FALSE;
	*/
	/**
	* function provided to clear the input buffer whenever you detect buffer
	* overflow. It just reads the leftover bytes and throws them away, resetting
	* the error state
	**/
	/*
	static void clear_buffer(void) {
	    int ch;
	    while (ch = getc(stdin), ch != '\n' && ch != EOF)
	        ;
	    clearerr(stdin);
	}*/
	
	/**
"7	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 1, study period 2, 2020.
	 *****************************************************************************/
	#include "io.h"
	#include "options.h"
	
	#include <ctype.h>
	#include <limits.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	
	/**
	 * this module is the place to implement all i/o functionality. You should not
	 * call printf/fprintf, etc, outside this module as that will make it simpler
	 * if we ever want to change the target for output for the program.
	 **/
	
	/*the number of choices in the program*/
	#define NUM_MENU_CHOICES 5
	
	/*the minimum number of choices in the program*/
	#define MIN_NUM_MENU_CHOICES 1
	
	/*custom constants*/
	#define SCREENWIDTH 80
	#define TWO 2
	
	/*functions used in the program*/
	/*static void clear_buffer();
	BOOLEAN success = FALSE;
	*/
	/**
	* function provided to clear the input buffer whenever you detect buffer
	* overflow. It just reads the leftover bytes and throws them away, resetting
	* the error state
	**/
	/*
	static void clear_buffer(void) {
	    int ch;
	    while (ch = getc(stdin), ch != '\n' && ch != EOF)
	        ;
	    clearerr(stdin);
	}*/
	
	/**
"8	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 1, study period 2, 2020.
	 *****************************************************************************/
	#include "io.h"
	#include "options.h"
	
	#include <ctype.h>
	#include <limits.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	
	/**
	 * this module is the place to implement all i/o functionality. You should not
	 * call printf/fprintf, etc, outside this module as that will make it simpler
	 * if we ever want to change the target for output for the program.
	 **/
	
	/*the number of choices in the program*/
	#define NUM_MENU_CHOICES 5
	
	/*the minimum number of choices in the program*/
	#define MIN_NUM_MENU_CHOICES 1
	
	/*custom constants*/
	#define SCREENWIDTH 80
	#define TWO 2
	
	/*functions used in the program*/
	/*static void clear_buffer();
	BOOLEAN success = FALSE;
	*/
	/**
	* function provided to clear the input buffer whenever you detect buffer
	* overflow. It just reads the leftover bytes and throws them away, resetting
	* the error state
	**/
	/*
	static void clear_buffer(void) {
	    int ch;
	    while (ch = getc(stdin), ch != '\n' && ch != EOF)
	        ;
	    clearerr(stdin);
	}*/
	
	/**
"9	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 1, study period 2, 2020.
	 *****************************************************************************/
	#include "io.h"
	#include "options.h"
	
	#include <ctype.h>
	#include <limits.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	
	/**
	 * this module is the place to implement all i/o functionality. You should not
	 * call printf/fprintf, etc, outside this module as that will make it simpler
	 * if we ever want to change the target for output for the program.
	 **/
	
	/*the number of choices in the program*/
	#define NUM_MENU_CHOICES 5
	
	/*the minimum number of choices in the program*/
	#define MIN_NUM_MENU_CHOICES 1
	
	/*custom constants*/
	#define SCREENWIDTH 80
	#define TWO 2
	
	/*functions used in the program*/
	/*static void clear_buffer();
	BOOLEAN success = FALSE;
	*/
	/**
	* function provided to clear the input buffer whenever you detect buffer
	* overflow. It just reads the leftover bytes and throws them away, resetting
	* the error state
	**/
	/*
	static void clear_buffer(void) {
	    int ch;
	    while (ch = getc(stdin), ch != '\n' && ch != EOF)
	        ;
	    clearerr(stdin);
	}*/
	
	/**
"a	CHAR	0
	':
"-	CHAR	0
	 

# global variables:

# File marks:
'0  47  0  ~/weeks/week-03/wk3q1.c
'1  91  0  ~/assignments/a1/startup/io.c
'2  73  49  ~/assignments/a1/startup/io.c
'3  229  9  ~/assignments/a1/startup/io.c
'4  229  3  ~/assignments/a1/startup/io.c
'5  229  0  ~/assignments/a1/startup/io.c
'6  229  28  ~/assignments/a1/startup/io.c
'7  229  40  ~/assignments/a1/startup/io.c
'8  229  26  ~/assignments/a1/startup/io.c
'9  45  0  ~/assignments/a1/startup/main.c

# Jumplist (newest first):
-'  47  0  ~/weeks/week-03/wk3q1.c
-'  1  0  ~/weeks/week-03/wk3q1.c
-'  91  0  ~/assignments/a1/startup/io.c
-'  73  0  ~/assignments/a1/startup/io.c
-'  229  0  ~/assignments/a1/startup/io.c
-'  45  0  ~/assignments/a1/startup/main.c
-'  31  1  ~/assignments/a1/startup/main.c
-'  46  0  ~/assignments/a1/startup/main.c
-'  10  19  ~/assignments/a1/startup/io.h
-'  67  0  ~/assignments/a1/startup/io.h
-'  1  0  ~/assignments/a1/startup/shared.h
-'  15  16  /home/el9/E70949/shared/prog_in_c/examples/Structs/strtodate.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/examples/Structs/strtodate.c
-'  24  38  ~/assignments/a1/startup/readme.txt
-'  13  0  ~/assignments/a1/startup/readme.txt
-'  1  0  ~/assignments/a1/startup/r3eadme.txt
-'  1  0  ~/assignments/a1/startup/readme.txt
-'  1  0  ~/assignments/a1/startup/vim
-'  45  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/tm_examp.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/tm_examp.c
-'  70  4  ~/lastyear/assignment-one-answers/a1partb/menu.c
-'  36  4  ~/lastyear/assignment-one-answers/a1partb/menu.c
-'  1  0  ~/lastyear/assignment-one-answers/menu.c
-'  1  0  ~/assignments/a1/startup/menu.c
-'  4  0  ~/NERD_tree_2
-'  5  0  ~/NERD_tree_2
-'  1  0  ~/NERD_tree_2
-'  1  0  ~/NERD_tree_1
-'  5  0  ~/NERD_tree_1
-'  128  4  ~/lastyear/assignment-one/main.c
-'  65  4  ~/lastyear/assignment-one/main.c
-'  169  0  ~/lastyear/assignment-one/menu.c
-'  128  0  ~/lastyear/assignment-one/menu.c
-'  18  4  /home/el9/E70949/shared/prog_in_c/lectures/Week-02/while.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-02/while.c
-'  1  0  ~/lastyear/assignment-one-answers/a1partb/menu.h
-'  104  0  ~/lastyear/assignment-one-answers/a1partb/main.c
-'  70  8  ~/lastyear/assignment-one-answers/a1partb/main.c
-'  4  0  ~/lastyear/assignment-one-answers/NERD_tree_2
-'  17  2  ~/lastyear/assignment-one-answers/NERD_tree_2
-'  1  0  ~/lastyear/assignment-one-answers/NERD_tree_2
-'  1  0  ~/lastyear/assignment-one-answers/NERD_tree_1
-'  17  2  ~/lastyear/assignment-one-answers/NERD_tree_1
-'  1  0  ~/lastyear/assignment-one-answers/main.c
-'  229  8  ~/lastyear/assignment-one/menu.c
-'  48  0  ~/assignments/a1/startup/main.c
-'  248  4  ~/assignments/a1/startup/io.c
-'  96  66  ~/assignments/a1/startup/options.c
-'  109  0  ~/assignments/a1/startup/options.c
-'  69  0  ~/assignments/a1/startup/options.h
-'  1  0  ~/assignments/a1/startup/options.h
-'  16  18  ~/assignments/a1/startup/helpers.h
-'  23  0  ~/assignments/a1/startup/helpers.h
-'  29  0  ~/assignments/a1/startup/helpers.c
-'  1  0  ~/assignments/a1/startup/helpers.c
-'  30  45  ~/assignments/a1/startup/readme.txt
-'  1  0  ~/assignments/a1/startup/main.h
-'  1  0  ~/assignments/io.c
-'  1  1  ~/weeks/week-04/actual/lab.c
-'  46  0  ~/weeks/week-04/actual/lab.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/random.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/reverseprint.c
-'  20  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/recursiveprint.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/recursiveprint.c
-'  31  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/recursiverandom.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/recursiverandom.c
-'  36  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/fibonacci.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/fibonacci.c
-'  30  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/factorial.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/factorial.c
-'  67  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/bubble_improved.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/bubble_improved.c
-'  19  0  ~/weeks/week-04/extra/one-demo.c
-'  68  8  ~/weeks/week-04/extra/one-demo.c
-'  57  33  ~/weeks/week-04/extra/sum.c
-'  54  4  ~/weeks/week-04/extra/sum.c
-'  1  0  ~/weeks/week-04/extra/sum.h
-'  55  0  ~/weeks/week-04/extra/sum.c
-'  1  0  ~/weeks/week-04/extra/sum.c
-'  37  0  ~/weeks/week-03/wk3q0.c
-'  5  0  ~/weeks/week-03/wk3q0.c
-'  18  0  ~/weeks/week-03/wk3q4.c
-'  59  4  ~/weeks/week-03/wk3q4.c
-'  40  4  ~/weeks/week-03/wk3q0.c
-'  11  4  ~/weeks/week-03/wk3q4.h
-'  12  0  ~/weeks/week-03/wk3q4.h
-'  13  0  ~/weeks/week-03/wk3q2.h
-'  57  0  ~/lastyear/copies/tutorials/wk3/week-three-act-four.c
-'  63  0  ~/lastyear/copies/tutorials/wk3/week-three-act-four.c
-'  3  0  ~/lastyear/copies/tutorials/wk3/week-three-act-four.c
-'  15  0  ~/lastyear/copies/tutorials/wk3/week-three-act-three.c
-'  17  10  ~/weeks/week-03/wk3q2.c
-'  1  0  ~/weeks/week-03/wk3q2.c
-'  42  20  ~/weeks/week-03/wk3q3.c
-'  53  0  ~/weeks/week-03/wk3q3.c
-'  1  0  ~/weeks/week-03/sq3q3.c
-'  53  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-03/read_rest_of_line.c
-'  9  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-03/read_rest_of_line.c
-'  24  0  ~/weeks/week-03/wk3q2.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-03/read_rest_of_line.c

# History of marks within files (newest to oldest):

> ~/weeks/week-03/wk3q1.c
	"	47	0

> ~/assignments/a1/startup/io.c
	"	91	0
	+	229	3
	+	229	34
	+	229	51
	+	229	3
	+	229	6
	+	229	2
	+	229	28
	+	229	24
	+	229	37
	+	229	14
	+	229	0
	+	229	1
	+	229	10
	+	229	17
	+	229	32
	+	229	20
	+	229	35
	+	229	46
	+	229	57
	+	229	29
	+	229	15
	+	229	6
	+	229	22
	+	229	31
	+	229	0
	+	229	5
	+	229	1
	+	229	4
	+	229	1
	+	229	0
	+	229	27
	+	229	22
	+	229	22
	+	229	48
	+	229	40
	+	229	47
	+	229	44
	+	229	18
	+	229	54
	+	229	54
	+	229	1
	+	229	6
	+	229	1
	+	229	2
	+	229	5
	+	229	28
	+	229	30
	+	229	42
	+	229	52
	+	229	0
	+	229	13
	+	229	21
	+	229	0
	+	229	54
	+	229	29
	+	229	35
	+	229	24
	+	229	1
	+	229	2
	+	229	2
	+	229	53
	+	229	7
	+	229	7
	+	229	32
	+	229	34
	+	229	38
	+	229	2
	+	229	6
	+	229	5
	+	229	1
	+	229	3
	+	229	1
	+	229	4
	+	229	1
	+	229	1
	+	229	28
	+	229	1
	+	229	2
	+	229	1
	+	229	1
	+	229	0
	+	229	2
	+	229	26
	+	229	4
	+	229	40
	+	229	28
	+	229	28
	+	229	27
	+	229	27
	+	229	54
	+	229	41
	+	229	0
	+	229	0
	+	229	1
	+	229	0
	+	229	0
	+	229	13
	+	229	4
	+	229	9
	+	229	0

> /home/el9/E70949/shared/prog_in_c/examples/Structs/strtodate.c
	"	30	58

> ~/assignments/a1/startup/helpers.h
	"	1	0

> ~/lastyear/assignment-one/main.c
	"	63	0

> ~/assignments/a1/startup/readme.txt
	"	36	582
	^	36	583
	.	36	522
	+	11	103
	+	13	79
	+	17	25
	+	27	0
	+	30	93
	+	30	7
	+	36	375
	+	30	78
	+	34	14
	+	36	433
	+	36	169
	+	36	522

> ~/assignments/a1/startup/main.c
	"	28	0
	+	53	17
	+	53	9
	+	53	18
	+	53	17
	+	53	0
	+	53	10
	+	53	16
	+	53	11
	+	53	12
	+	53	0
	+	53	8
	+	53	8
	+	53	31
	+	53	8
	+	53	25
	+	53	29
	+	53	31
	+	53	19
	+	53	20
	+	53	58
	+	53	0
	+	53	0
	+	53	1
	+	53	1
	+	53	0
	+	53	0
	+	53	32
	+	53	10
	+	53	11
	+	53	16
	+	53	0
	+	53	24
	+	53	0
	+	53	25
	+	53	10
	+	53	23
	+	53	21
	+	53	15
	+	53	7
	+	53	18
	+	53	10
	+	53	7
	+	53	15
	+	53	22
	+	53	24
	+	53	15
	+	53	21
	+	53	15
	+	53	0
	+	53	25
	+	53	27
	+	53	4
	+	53	4
	+	53	0
	+	53	24
	+	53	1
	+	53	1
	+	53	2
	+	53	37
	+	53	16
	+	53	11
	+	53	10
	+	53	15
	+	53	16
	+	53	14
	+	53	22
	+	53	33
	+	53	15
	+	53	0
	+	53	16
	+	53	24
	+	53	35
	+	53	0
	+	53	16
	+	53	0
	+	53	0
	+	53	14
	+	53	4
	+	53	21
	+	53	24
	+	53	18
	+	53	16
	+	53	0
	+	53	24
	+	53	19
	+	53	25
	+	53	5
	+	53	4
	+	51	0
	+	51	0
	+	51	4
	+	51	0
	+	51	12
	+	51	18
	+	51	24
	+	51	35
	+	51	0
	+	51	31
	+	51	10
	+	51	0

> ~/assignments/a1/startup/io.h
	"	53	34
	+	67	4
	+	67	0
	+	67	5
	+	67	0
	+	67	8
	+	67	41
	+	67	0
	+	67	0
	+	67	0
	+	67	8
	+	67	27
	+	67	21
	+	67	25
	+	67	0
	+	67	0
	+	67	44
	+	67	52
	+	67	1
	+	67	1
	+	67	21
	+	67	4
	+	67	0
	+	67	19
	+	67	19
	+	67	37
	+	67	48
	+	67	46
	+	67	47
	+	67	0
	+	67	19
	+	67	19
	+	67	19
	+	67	35
	+	67	31
	+	67	11
	+	67	24
	+	67	19
	+	67	16
	+	67	21
	+	67	11
	+	67	22
	+	67	19
	+	67	0
	+	67	0
	+	67	0
	+	67	0
	+	67	0
	+	67	1
	+	67	29
	+	67	22
	+	67	11
	+	67	0

> ~/lastyear/assignment-one/menu.c
	"	176	1
	+	349	30

> /home/el9/E70949/shared/prog_in_c/lectures/Week-03/counter.c
	"	22	44

> ~/lastyear/assignment-one/menu.h
	"	39	0

> ~/assignments/a1/startup/main.h
	"	1	0

> ~/weeks/week-03/wk3q3.c
	"	37	0

> ~/weeks/week-03/wk3q2.c
	"	43	0

> /home/el9/E70949/shared/prog_in_c/lectures/Week-03/is_int.c
	"	37	0

> ~/assignments/a1/startup/shared.h
	"	1	0

> ~/assignments/a1/startup/r3eadme.txt
	"	1	0

> ~/assignments/a1/startup/vim
	"	1	0

> /home/el9/E70949/shared/prog_in_c/lectures/Week-04/tm_examp.c
	"	45	0

> ~/lastyear/assignment-one-answers/a1partb/menu.c
	"	70	4
