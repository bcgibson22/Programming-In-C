# This viminfo file was generated by Vim 7.4.
# You may edit it if you're careful!

# Value of 'encoding' when this file was written
*encoding=latin1


# hlsearch on (H) or off (h):
~H
# Last Search Pattern:
~Msle0~/\<str_function\>

# Last Substitute Search Pattern:
~MSle0&?

# Last Substitute String:
$

# Command Line History (newest to oldest):
:q
:wq
:w
:q!
:ConqueTermVSplit gdb
:1
::
:swq
::w
:ew
:wqa
:$
:qa
:help syntastic-checkers-c
:print syntastic-checkers-c
:syntastic-checkers-c
:help syntastic-recommended
:help syntaxstic-checkers
:.ll
:wa
:tabnew menu.c
:tabnew options.c
:tabnew optioins.c
:qa!
:!qa
:vsp reverseinput
:ClangFormatAutoDisable
:commentary
:set relativenumber
:wsa
:tabnew options.h
:220
:tabnew helpers.c
:409
:tabnew menu.h
:o options.h
:sp
:207
:171
:tabnew main.h
:NERDTree
:make 
:118
:tabnew main.c
:tabnew helpers.h
:sp helpers.c
:vsp helpers.c
:vsp menu.c
:51
:337
:wqa'
:sp options.h
:vsp main.h
:sp menu.h
:ConqueTerm bash
:make
:tabnew ~/.vim/colors/taffy.vim
:wqz
:ws
:'<,'>%s//
:'<,'>%s/\/\//
:!pwd
:>qa
:qa'
:ConqueTermVSplit fish
:s
:a
:'<,'>qa
:tabnew ThreadPool.cpp
:browse tabnew
:tabnew Search.h
:tabnew Experiment.cpp
:162
:148
:130
:112
:113
:108
:%s/?//g
:%s/\?//g
:sp Data.h
:tabnew list.h
:199
:105
:254
:342
:236

# Search String History (newest to oldest):
? \<filename\>
? \<fpRead\>
? \<themenu\>
? \<NUM_MENU_CHOICES\>
? \<str_function\>
? \<c\>
? \<token\>
? \<l\>
?/i
?/*                                                                                                                  i
?/invalid denom
?/guess
?/process_menu
?/init
? \<newreg\>
? \<request_count\>
?/return
?/skip_array
?/can
? \<tok_part\>
?/register
? \<denom_result\>
?/PUT
? \<process_change_requests\>
? \<quit_succ\>
?/ires
?/guess_a_number
?/process
? \<current_guess\>
? \<lreg\>
? \<skip_array\>
? \<l_reg_skip_array\>
? \<value_count\>
?/help
?/assert(FALSE)
? \<single_thread\>
?/main
? \<read_lock\>
?/read
?/lock
? \<writeLock\>
?/sleep
? \<publicLock\>
?/pthread
?/omment
?/ommend
? \<strdup\>
?/CHOIC
?/normal
?/MAX
? \<can_give_all_changes\>
?/runner
?/manyAllocations
? \<thread_run\>
?/thread_run
?/readUlock
? \<readUnlock\>
? \<freelistReader\>
?/NUM_ALLOCS
? \<justAlloc\>
?/create
? \<addReader\>
? \<findBestFit\>
? \<runner\>
?/unlock
? \<makeAllocations\>
? \<master\>
? \<readLock\>
?/read_
? \<THREADNUM\>
? \<alloc_firstFit\>
? \<waiting_readers\>
?/alloc_worker
? \<alloc_worker\>
? \<writing_mutex\>
? \<thread_lock\>
?/genData
? \<bestChunk\>
? \<worstFit\>
? \<alloc_thread\>
? \<freeReadLock\>
?/read'
? \<readLockStart\>
?/mutex

# Expression History (newest to oldest):

# Input Line History (newest to oldest):

# Input Line History (newest to oldest):

# Registers:
""0	CHAR	0
	e
"1	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 2, study period 2, 2020.
	 *****************************************************************************/
	#include "fileio.h"
	#include "helpers.h"
	#include "shared.h"
	#include <stdio.h>
	#include <assert.h>
	#include <string.h>
	#include <stdlib.h>
	
	/*added constants*/
	#define READING 1
	#define WRITING 2
	#define LINELEN 80
	#define EXTRACHARS 2
	
	/*added functions*/
	/*int load(struct file_data *, FILE *);*/
	FILE fpRead;
	static void clear_buffer();
	
	/**
	 * modified clear_buffer() function to work with file input
	 **/
	
	static void clear_buffer(FILE *fp) {
	    int ch;
	    while (ch = getc(fp), ch != '\n' && ch != EOF)
	        ;
	    clearerr(fp);
	}
	
	/**
	 * loads the data into the appropriate list type according to the value
	 * passed in.
	 **/
	struct file_data load_file(const char filename[], enum list_type type) {
	    struct file_data data;
	    int result;
	    FILE *fptr;
	    char line[LINELEN + EXTRACHARS];
	    int load(struct file_data, FILE *);
	    fptr = fopen("filename[READING]", "r");
	    result = load(data, fptr);
	
"2	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 2, study period 2, 2020.
	 *****************************************************************************/
	#include "fileio.h"
	#include "helpers.h"
	#include "shared.h"
	#include <stdio.h>
	#include <assert.h>
	#include <string.h>
	#include <stdlib.h>
	
	/*added constants*/
	#define READING 1
	#define WRITING 2
	#define LINELEN 80
	#define EXTRACHARS 2
	
	/*added functions*/
	/*int load(struct file_data *, FILE *);*/
	FILE fpRead;
	static void clear_buffer();
	
	/**
	 * modified clear_buffer() function to work with file input
	 **/
	
	static void clear_buffer(FILE *fp) {
	    int ch;
	    while (ch = getc(fp), ch != '\n' && ch != EOF)
	        ;
	    clearerr(fp);
	}
	
	/**
	 * loads the data into the appropriate list type according to the value
	 * passed in.
	 **/
	struct file_data load_file(const char filename[], enum list_type type) {
	    struct file_data data;
	    int result;
	    FILE *fptr;
	    char line[LINELEN + EXTRACHARS];
	    int load(struct file_data, FILE *);
	    fptr = fopen("filename[READING]", "r");
	    result = load(data, fptr);
	
"3	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 2, study period 2, 2020.
	 *****************************************************************************/
	#include "fileio.h"
	#include "helpers.h"
	#include "shared.h"
	#include <stdio.h>
	#include <assert.h>
	#include <string.h>
	#include <stdlib.h>
	
	/*added constants*/
	#define READING 1
	#define WRITING 2
	#define LINELEN 80
	#define EXTRACHARS 2
	
	/*added functions*/
	/*int load(struct file_data *, FILE *);*/
	FILE fpRead;
	static void clear_buffer();
	
	/**
	 * modified clear_buffer() function to work with file input
	 **/
	
	static void clear_buffer(FILE *fp) {
	    int ch;
	    while (ch = getc(fp), ch != '\n' && ch != EOF)
	        ;
	    clearerr(fp);
	}
	
	/**
	 * loads the data into the appropriate list type according to the value
	 * passed in.
	 **/
	struct file_data load_file(const char filename[], enum list_type type) {
	    struct file_data data;
	    int result;
	    FILE *fptr;
	    char line[LINELEN + EXTRACHARS];
	    int load(struct file_data, FILE *);
	    fptr = fopen("filename[READING]", "r");
	    result = load(data, fptr);
	
"4	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 2, study period 2, 2020.
	 *****************************************************************************/
	#include "fileio.h"
	#include "helpers.h"
	#include "shared.h"
	#include <stdio.h>
	#include <assert.h>
	#include <string.h>
	#include <stdlib.h>
	
	/*added constants*/
	#define READING 1
	#define WRITING 2
	#define LINELEN 80
	#define EXTRACHARS 2
	
	/*added functions*/
	/*int load(struct file_data *, FILE *);*/
	FILE fpRead;
	static void clear_buffer();
	
	/**
	 * modified clear_buffer() function to work with file input
	 **/
	
	static void clear_buffer(FILE *fp) {
	    int ch;
	    while (ch = getc(fp), ch != '\n' && ch != EOF)
	        ;
	    clearerr(fp);
	}
	
	/**
	 * loads the data into the appropriate list type according to the value
	 * passed in.
	 **/
	struct file_data load_file(const char filename[], enum list_type type) {
	    struct file_data data;
	    int result;
	    FILE *fptr;
	    char line[LINELEN + EXTRACHARS];
	    int load(struct file_data, FILE *);
	    fptr = fopen("filename[READING]", "r");
	    result = load(data, fptr);
	
"5	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 2, study period 2, 2020.
	 *****************************************************************************/
	#include "fileio.h"
	#include "helpers.h"
	#include "shared.h"
	#include <stdio.h>
	#include <assert.h>
	#include <string.h>
	#include <stdlib.h>
	
	/*added constants*/
	#define READING 1
	#define WRITING 2
	#define LINELEN 80
	#define EXTRACHARS 2
	
	/*added functions*/
	/*int load(struct file_data *, FILE *);*/
	FILE fpRead;
	static void clear_buffer();
	
	/**
	 * modified clear_buffer() function to work with file input
	 **/
	
	static void clear_buffer(FILE *fp) {
	    int ch;
	    while (ch = getc(fp), ch != '\n' && ch != EOF)
	        ;
	    clearerr(fp);
	}
	
	/**
	 * loads the data into the appropriate list type according to the value
	 * passed in.
	 **/
	struct file_data load_file(const char filename[], enum list_type type) {
	    struct file_data data;
	    int result;
	    FILE *fptr;
	    char line[LINELEN + EXTRACHARS];
	    int load(struct file_data, FILE *);
	    fptr = fopen("filename[READING]", "r");
	    result = load(data, fptr);
	
"6	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 2, study period 2, 2020.
	 *****************************************************************************/
	#include "fileio.h"
	#include "helpers.h"
	#include "shared.h"
	#include <stdio.h>
	#include <assert.h>
	#include <string.h>
	#include <stdlib.h>
	
	/*added constants*/
	#define READING 1
	#define WRITING 2
	#define LINELEN 80
	#define EXTRACHARS 2
	
	/*added functions*/
	/*int load(struct file_data *, FILE *);*/
	FILE fpRead;
	static void clear_buffer();
	
	/**
	 * modified clear_buffer() function to work with file input
	 **/
	
	static void clear_buffer(FILE *fp) {
	    int ch;
	    while (ch = getc(fp), ch != '\n' && ch != EOF)
	        ;
	    clearerr(fp);
	}
	
	/**
	 * loads the data into the appropriate list type according to the value
	 * passed in.
	 **/
	struct file_data load_file(const char filename[], enum list_type type) {
	    struct file_data data;
	    int result;
	    FILE *fptr;
	    char line[LINELEN + EXTRACHARS];
	    int load(struct file_data, FILE *);
	    fptr = fopen("filename[READING]", "r");
	    result = load(data, fptr);
	
"7	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 2, study period 2, 2020.
	 *****************************************************************************/
	#include "fileio.h"
	#include "helpers.h"
	#include "shared.h"
	#include <stdio.h>
	#include <assert.h>
	#include <string.h>
	#include <stdlib.h>
	
	/*added constants*/
	#define READING 1
	#define WRITING 2
	#define LINELEN 80
	#define EXTRACHARS 2
	
	/*added functions*/
	/*int load(struct file_data *, FILE *);*/
	FILE fpRead;
	/*static void clear_buffer();*/
	
	/**
	 * modified clear_buffer() function to work with file input
	 **/
	/*
	static void clear_buffer(FILE *fp) {
	    int ch;
	    while (ch = getc(fp), ch != '\n' && ch != EOF)
	        ;
	    clearerr(fp);
	}*/
	
	/**
	 * loads the data into the appropriate list type according to the value
	 * passed in.
	 **/
	struct file_data load_file(const char filename[], enum list_type type) {
	    struct file_data data;
	    int result;
	    FILE *fptr;
	    char line[LINELEN + EXTRACHARS];
	int load(struct file_data, FILE *);
	fptr = fopen("filename[READING]", "r");
	result = load(data, fptr);
	
"8	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 2, study period 2, 2020.
	 *****************************************************************************/
	#include "fileio.h"
	#include "helpers.h"
	#include "shared.h"
	#include <stdio.h>
	#include <assert.h>
	#include <string.h>
	#include <stdlib.h>
	
	/*added constants*/
	#define READING 1
	#define WRITING 2
	#define LINELEN 80
	#define EXTRACHARS 2
	
	/*added functions*/
	/*int load(struct file_data *, FILE *);*/
	FILE fpRead;
	/*static void clear_buffer();*/
	
	/**
	 * modified clear_buffer() function to work with file input
	 **/
	/*
	static void clear_buffer(FILE *fp) {
	    int ch;
	    while (ch = getc(fp), ch != '\n' && ch != EOF)
	        ;
	    clearerr(fp);
	}*/
	
	/**
	 * loads the data into the appropriate list type according to the value
	 * passed in.
	 **/
	struct file_data load_file(const char filename[], enum list_type type) {
	    struct file_data data;
	    int result;
	    FILE *fptr;
	    char line[LINELEN+EXTRACHARS]
	};
	int load(struct file_data, FILE *);
	fptr = fopen("filename[READING]", "r");
	result = load(data, fptr);
"9	LINE	0
	/******************************************************************************
	 * Student Name    : Brearne Gibson
	 * RMIT Student ID : s3496168
	 *
	 * Startup code provided by Paul Miller for use in "Programming in C",
	 * Assignment 2, study period 2, 2020.
	 *****************************************************************************/
	#include "fileio.h"
	#include "helpers.h"
	#include "shared.h"
	#include <stdio.h>
	#include <assert.h>
	#include <string.h>
	#include <stdlib.h>
	
	/*added constants*/
	#define READING 1
	#define WRITING 2
	#define LINELEN 80
	#define EXTRACHARS 2
	
	/*added functions*/
	/*int load(struct file_data *, FILE *);*/
	FILE fpRead;
	/*static void clear_buffer();*/
	
	/**
	 * modified clear_buffer() function to work with file input
	 **/
	/*
	static void clear_buffer(FILE *fp) {
	    int ch;
	    while (ch = getc(fp), ch != '\n' && ch != EOF)
	        ;
	    clearerr(fp);
	}*/
	
	/**
	 * loads the data into the appropriate list type according to the value
	 * passed in.
	 **/
	struct file_data load_file(const char filename[], enum list_type type) {
	    struct file_data data;
	    int result;
	    FILE *fptr;
	    char line[iLINELEN+EXTRACHARS};
	    int load(struct file_data, FILE *);
	    fptr = fopen("filename[READING]", "r");
	    result = load(data, fptr);
	
"a	CHAR	0
	':
"-	CHAR	0
	e

# global variables:

# File marks:
'0  43  8  ~/assignments/a2/partb/startup/fileio.c
'1  67  23  ~/assignments/a2/partb/startup/fileio.c
'2  35  4  ~/assignments/a2/partb/startup/main.c
'3  27  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-07/list.h
'4  19  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-07/personlist.c
'5  1  4  /home/el9/E70949/shared/prog_in_c/lectures/Week-07/personlist.c
'6  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-07/personlist.h
'7  20  20  /home/el9/E70949/shared/prog_in_c/lectures/Week-07/personlist.c
'8  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/phonebk_strtok.c
'9  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/phonebk_strok.c

# Jumplist (newest first):
-'  43  8  ~/assignments/a2/partb/startup/fileio.c
-'  67  8  ~/assignments/a2/partb/startup/fileio.c
-'  86  4  ~/assignments/a2/partb/startup/fileio.c
-'  35  4  ~/assignments/a2/partb/startup/main.c
-'  38  2  ~/assignments/a2/partb/startup/main.c
-'  27  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-07/list.h
-'  19  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-07/personlist.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-07/personlist.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-07/list.h
-'  20  4  /home/el9/E70949/shared/prog_in_c/lectures/Week-07/personlist.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-07/personlist.h
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/phonebk_strtok.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/phonebk_strok.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/convert.c
-'  21  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-02/union.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-02/union.c
-'  44  4  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/reader.c
-'  31  4  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/reader.c
-'  29  4  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/reader.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/reader
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/reader.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/loader.c
-'  1  0  ~/assignments/a2/partb/startup/shared.h
-'  1  0  ~/weeks/week-09/tutorial/testing/ctu.txt
-'  38  19  ~/weeks/week-09/tutorial/testing/testing.c
-'  47  12  ~/weeks/week-09/tutorial/testing/testing.c
-'  15  1  ~/weeks/week-09/tutorial/testing/testing.h
-'  24  0  ~/weeks/week-09/tutorial/testing/testing.h
-'  20  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/fsupport.h
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/phone.h
-'  30  4  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/phonebk_strtok.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/phonebk_strtok.h
-'  71  12  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/phonebk_strtok.c
-'  21  4  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/phonebk_strtok.c
-'  27  4  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/phonebk_strtok.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/fsupport.h
-'  42  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/phonebk_strtok.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/every_other.c
-'  23  4  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/add_spaces.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-05/add_spaces.c
-'  47  0  ~/assignments/a2/partb/startup/fileio.h
-'  1  0  ~/assignments/a2/partb/startup/fileio.h
-'  1  0  /home/el9/E70949/shared/prog_in_c/tutes/class_A_SP2/personlist/list.h
-'  98  34  /home/el9/E70949/shared/prog_in_c/tutes/class_A_SP2/personlist/list.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/tutes/class_A_SP2/personlist/list.c
-'  1  0  ~/assignments/a2/partb/startup/shared.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-09/list.c
-'  7  19  /home/el9/E70949/shared/prog_in_c/lectures/Week-09/personlist.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-09/personlist.c
-'  28  4  ~/weeks/week-06/mistake.c
-'  21  4  ~/weeks/week-06/mistake.c
-'  1  0  ~/weeks/week-06/lab5/solution/ceaserlib.h
-'  139  0  ~/weeks/week-06/lab5/solution/ceaserlib.c
-'  1  0  ~/weeks/week-06/lab5/solution/ceaserlib.c
-'  75  0  ~/weeks/week-06/lab5/solution/ceaser.c
-'  1  0  ~/weeks/week-06/lab5/solution/ceaser.c
-'  1  0  ~/weeks/week-06/lab5/ceaserlib.c
-'  40  16  ~/weeks/week-06/lab5/ceaser.c
-'  79  40  ~/weeks/week-06/lab5/ceaser.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/recursiverandom.c
-'  1  0  ~/weeks/week-06/mistake.c
-'  13  34  ~/.bashrc
-'  1  0  ~/.bashrc
-'  1  0  ~/weeks/week-06/.bashrc
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-06/conditional1.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-06/conditionall.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-06/notinit.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-06/segfault2.c
-'  14  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-06/segfault1.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-06/segfault1.c
-'  64  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-02/union.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-03/size.c
-'  56  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-03/ctype_example.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-03/ctype_example.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-04/fibonacci.c
-'  74  10  ~/assignments/a1/startup/options.c
-'  72  12  ~/assignments/a1/startup/options.c
-'  122  0  ~/assignments/a1/startup/options.c
-'  194  5  ~/lastyear/assignment-one/options.c
-'  1  0  ~/lastyear/assignment-one/options.c
-'  325  0  ~/lastyear/assignment-one/menu.c
-'  1  0  ~/lastyear/assignment-one/menu.c
-'  1  0  ~/lastyear/assignment-one/vim
-'  143  0  ~/lastyear/assignment-one-answers/a1partb/menu.c
-'  39  1  ~/lastyear/assignment-one-answers/a1partb/menu.c
-'  51  0  ~/assignments/a1/startup/main.c
-'  145  12  ~/assignments/a1/startup/main.c
-'  28  11  /home/el9/E70949/shared/prog_in_c/assignments/a1/a1bsolution/main.c
-'  15  0  /home/el9/E70949/shared/prog_in_c/assignments/a1/a1bsolution/main.c
-'  51  12  /home/el9/E70949/shared/prog_in_c/lectures/Week-03/is_int.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-03/is_int.c
-'  1  0  /home/el9/E70949/shared/prog_in_c/lectures/Week-02/enumtostring.c
-'  88  0  /home/el9/E70949/shared/prog_in_c/assignments/a1/a1bsolution/io.c
-'  63  0  /home/el9/E70949/shared/prog_in_c/assignments/a1/a1bsolution/io.c
-'  8  0  /home/el9/E70949/shared/prog_in_c/assignments/a1/a1bsolution/main.c
-'  74  0  ~/assignments/a1/startup/io.c
-'  35  4  ~/assignments/a2/partb/startup/main.c

# History of marks within files (newest to oldest):

> ~/assignments/a2/partb/startup/fileio.c
	"	43	8
	+	86	24
	+	86	11
	+	86	15
	+	86	0
	+	86	0
	+	86	32
	+	86	12
	+	86	30
	+	86	28
	+	86	25
	+	86	31
	+	86	25
	+	86	23
	+	86	9
	+	86	0
	+	86	4
	+	86	6
	+	86	31
	+	86	1
	+	86	6
	+	86	1
	+	86	2
	+	86	30
	+	86	56
	+	86	1
	+	86	6
	+	86	2
	+	86	26
	+	86	27
	+	86	19
	+	86	19
	+	86	47
	+	86	19
	+	86	19
	+	86	22
	+	86	27
	+	86	19
	+	86	0
	+	86	1
	+	86	35
	+	86	44
	+	86	18
	+	86	13
	+	86	7
	+	86	35
	+	86	13
	+	86	44
	+	86	30
	+	86	29
	+	86	30
	+	86	0
	+	86	31
	+	86	53
	+	86	0
	+	86	41
	+	86	34
	+	86	32
	+	86	19
	+	86	20
	+	86	32
	+	86	0
	+	86	32
	+	86	8
	+	86	13
	+	86	38
	+	86	0
	+	86	1
	+	86	27
	+	86	27
	+	86	17
	+	86	11
	+	86	23

> /home/el9/E70949/shared/prog_in_c/lectures/Week-07/personlist.c
	"	10	12

> /home/el9/E70949/shared/prog_in_c/lectures/Week-05/phonebk_strtok.c
	"	1	0

> ~/assignments/a2/partb/startup/main.c
	"	35	4
	+	38	72
	+	38	13
	+	38	34
	+	38	17
	+	38	25
	+	38	11
	+	38	26
	+	38	8
	+	38	4
	+	38	0
	+	38	0
	+	38	5
	+	38	14
	+	38	4
	+	38	0
	+	38	5
	+	38	25
	+	38	13
	+	38	4
	+	38	17
	+	38	47
	+	38	17
	+	38	1
	+	38	20
	+	38	0
	+	38	0

> /home/el9/E70949/shared/prog_in_c/lectures/Week-07/list.h
	"	27	0

> /home/el9/E70949/shared/prog_in_c/lectures/Week-07/personlist.h
	"	1	0

> /home/el9/E70949/shared/prog_in_c/lectures/Week-05/phonebk_strok.c
	"	1	0

> /home/el9/E70949/shared/prog_in_c/lectures/Week-05/convert.c
	"	1	0

> /home/el9/E70949/shared/prog_in_c/lectures/Week-02/union.c
	"	21	0

> /home/el9/E70949/shared/prog_in_c/lectures/Week-05/reader.c
	"	44	4

> ~/assignments/a2/partb/startup/fileio.h
	"	28	0

> /home/el9/E70949/shared/prog_in_c/lectures/Week-05/reader
	"	1	0

> /home/el9/E70949/shared/prog_in_c/lectures/Week-04/loader.c
	"	1	0

> ~/assignments/a2/partb/startup/shared.h
	"	1	0

> ~/weeks/week-09/tutorial/testing/ctu.txt
	"	1	0
	^	1	51
	.	1	51
	+	1	51
	+	1	53
	+	1	51

> ~/weeks/week-09/tutorial/testing/testing.c
	"	38	19
	+	47	14
	+	47	4
	+	47	6
	+	47	4
	+	47	4
	+	47	33
	+	47	18
	+	47	32
	+	47	36
	+	47	42
	+	47	38
	+	47	4
	+	47	0
	+	47	13
	+	47	19
	+	47	19
	+	47	15
	+	47	13
	+	47	36
	+	47	3
	+	47	43
	+	47	35
	+	47	0
	+	47	61
	+	47	0
	+	47	61
	+	47	0
	+	47	42
	+	47	13
	+	47	43
	+	47	20
	+	47	19
	+	47	21
	+	47	72
	+	47	29
	+	47	59
	+	47	0
	+	47	62
	+	47	35
	+	47	69
	+	47	32
	+	47	0
	+	47	25
	+	47	55
	+	47	72
	+	47	46
	+	47	0
	+	47	56
	+	47	37
	+	47	36
	+	47	38
	+	47	36
	+	47	39
	+	47	35
	+	47	34
	+	47	36
	+	47	37
	+	47	21
	+	47	23
	+	47	23
	+	47	36
	+	47	20

> ~/weeks/week-09/tutorial/testing/testing.h
	"	15	1
	+	24	21
	+	24	0
	+	24	0
	+	24	1
	+	24	1

> ~/weeks/week-09/phone.h
	"	1	0

> ~/weeks/week-09/fsupport.h
	"	1	0

> ~/weeks/week-09/phonebk_strtok.c
	"	1	0
