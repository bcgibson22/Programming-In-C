#!/bin/bash 
DIRNAME=/usr/bin/dirname
ECHO=/usr/bin/echo
REALPATH=/usr/bin/realpath
FIND=/usr/bin/find
GREP=/usr/bin/grep
ENV=/usr/bin/env
CC=/usr/bin/gcc
SED=/usr/bin/sed
BASENAME=/usr/bin/basename
RM=/usr/bin/rm
DIFF=/usr/bin/diff
SORT=/usr/bin/sort
VALGRIND=/usr/bin/valgrind
CUT=/usr/bin/cut
LONGEST=/home/el9/E70949/bin/longest
MAGICNUM=/home/el9/E70949/bin/magicnum
TR=/usr/bin/tr

EARLY_EXIT="-e"
CFLAGS=(-ansi -Wall -pedantic)
if [[ "$1" = "-e" ]] ; then
    CFLAGS=(-ansi -Wall -pedantic -Werror)
fi
CFILES=(main.c options.c helpers.c menu.c)
EXE=./cpt220_menu_system
FAILURE=1

$RM -f $EXE
TESTERDIR=$($DIRNAME "$0")
TESTINGDIR=$($REALPATH .)
$RM -f "${TESTINGDIR}/current-listing"
$FIND "$TESTINGDIR" -maxdepth 1 -exec "$BASENAME" {} \; | \
$SED -e s/'^.\/'// | $SED -e /'^\.'/d | $SED 1d | $GREP -v Makefile \
    | $GREP -v "current-listing"| $SORT  > current-listing
missing_files="$($DIFF -wbBi "${TESTINGDIR}/current-listing" \
    "${TESTERDIR}/expected_files" 2>&1 | $GREP "^>" | $SED -e "s/^>//" )"
extra_files="$($DIFF -wBbi "${TESTINGDIR}/current-listing" \
    "${TESTERDIR}/expected_files" 2>&1 | $GREP "^<"| $SED -e s/'^<'//)"
if [[ "$missing_files" != "" ]] ; then
    $ECHO "The following files are missing from your program: $missing_files"| \
        $TR '\n' ' ' >&2
    $ECHO >&2
    if [[ "$1" = "-e" ]] ; then
        exit $FAILURE
    fi
fi
if [[ "$extra_files" != "" ]] ; then
    $ECHO -n "The following extra files are in your program directory " \
        "and should not be there:"
    $ECHO "$extra_files" | $TR '\n' ' '>&2
    $ECHO >&2
    if [[ "$1" = "-e" ]] ; then
        exit $FAILURE
    fi
fi
$ECHO "Compiling your program ..."
$ECHO "$CC ${CFLAGS[*]} ${CFILES[*]} -o $EXE" -g|| exit $FAILURE
"$CC" "${CFLAGS[@]}" "${CFILES[@]}" -o "$EXE" -g|| exit $FAILURE

$ECHO "The longest line in each file is: "
$LONGEST *.c *.h
$ECHO "Magic numbers in your code: "
$MAGICNUM *.c

for file in $($FIND ${TESTERDIR}/tests -maxdepth 1 -name *_input)  ; do
    root=$(basename $file _input)
    $ECHO $root
    $VALGRIND --quiet --track-origins=yes $EXE < $file > ${root}_result 2>&1
    valgrind_output="$($GREP "^==[0-9]*==" ${root}_result)"
    if [[ "$valgrind_output" != "" ]] ; then
        $ECHO "Error: there are memory problems in your code. " \
            "Please fix the following: "
        $ECHO -e "$valgrind_output"| $SED s/^'==[0-9]*=='// >&2
        if [[ "$1" = "$EARLY_EXIT" ]] ; then
            exit $FAILURE
        fi
    fi
    wanted=$($DIFF -wBbi ${root}_result ${TESTERDIR}/tests/${root}_output 2>&1 \
        | grep "^>")
    got=$($DIFF -wBbi ${root}_result ${TESTERDIR}/tests/${root}_output 2>&1 \
        | grep "^<")
    if [[ "$wanted" != "" ]] ; then
        $ECHO
        $ECHO "Error: the output from your program is not correct."
        $ECHO -n "We wanted: "
        $ECHO "$wanted"| $SED s/^'>'//
        $ECHO -n "But we got: "
        $ECHO "$got" | $SED s/^'<'//
        $ECHO
        if [[ "$1" = "$EARLY_EXIT" ]] ; then
            exit $FAILURE
        fi
    fi
    $RM -f ${root}_result
done

for file in $($FIND ${TESTERDIR}/tests/guess -maxdepth 1 -name *_input)  ; do
    root=$(basename $file _input)
    $ECHO $root
    seed=$($ECHO $root | $CUT -d_ -f2)
    $VALGRIND --quiet --track-origins=yes $EXE $seed < $file > ${root}_result 2>&1
    valgrind_output="$($GREP "^==[0-9]*==" ${root}_result)"
    if [[ "$valgrind_output" != "" ]] ; then
        $ECHO "Error: there are memory problems in your code. " \
            "Please fix the following: "
        $ECHO -e "$valgrind_output"| $SED s/^'==[0-9]*=='// >&2
        exit $FAILURE
    fi
    wanted=$($DIFF -wBbi ${root}_result ${TESTERDIR}/tests/${root}_output 2>&1 \
        | grep "^>")
    got="$($DIFF -wBbi "${root}_result" "${TESTERDIR}/tests/${root}_output" 2>&1 \
        | $GREP "^<")"
    if [[ "$wanted" != "" ]] ; then
        $ECHO
        $ECHO "Error: the output from your program is not correct."
        $ECHO -n "We wanted: "
        $ECHO "$wanted"| $SED s/^'>'//
        $ECHO -n "But we got: "
        $ECHO "$got" | $SED s/^'<'//
        $ECHO
        if [[ "$1" = "$EARLY_EXIT" ]] ; then
            exit $FAILURE
        fi
    fi
    $RM ${root}_result
done

